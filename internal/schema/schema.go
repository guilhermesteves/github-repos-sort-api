// Code generated by go-bindata.
// sources:
// ../../api/data/schema/repo.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ApiDataSchemaRepoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4d\x8e\xd3\x40\x10\x85\xf7\x39\xc5\x93\xd7\x9c\x60\x76\x20\x10\xb0\x19\x81\xc4\xac\x10\x42\x15\x77\x25\x69\xa6\xff\xa6\xba\x7a\x81\x46\x39\x0d\x8b\x39\x00\x62\x33\x5b\x5f\x0c\xb9\x93\x30\x4e\xb0\x13\x09\x0f\x2b\xab\xdb\xae\xf7\xf5\x7b\x55\xee\xfb\x05\xd0\xe8\xf7\xc4\xcd\x15\x9a\xb8\xfc\xc6\xad\x36\x2f\xfa\x3d\xc3\xb9\x15\x9b\xd4\xc6\xd0\xbf\x7a\x93\x55\x8a\x16\x21\xdc\x15\x86\x70\x12\xce\x1c\x94\x50\x3c\x21\x71\xce\x91\x76\x75\xc2\x77\xc5\x0a\x9b\xe6\x0a\x9f\x17\x00\xd0\x7c\xb5\xa6\xbe\x02\x1a\x67\x6f\x39\x1f\x16\x6b\xab\x9b\xb2\x6c\x16\xc0\x97\x5a\x49\xc6\xd8\x1e\x47\xee\x83\xc4\xc4\xa2\x96\x73\x73\x85\x15\xb9\xcc\xf5\x83\x34\xdc\xbe\x7f\x12\x3f\x2c\x06\x4e\xb2\x8a\x0d\xeb\x3d\xe9\x6f\x37\xd7\xd1\x30\xac\xc1\x4a\xa2\xc7\xdb\x3f\xe7\x00\xb6\x47\x07\x1d\x11\x0e\xc5\x2f\x59\x26\x85\x3f\x16\x0a\x1a\x33\x6a\x3d\x02\x21\x39\x52\x5a\x45\xf1\x74\x0c\xd8\x9b\x1f\x21\x0c\x9a\x30\x46\x78\x1f\xaa\x5a\xf7\xd0\xfd\xe2\x8c\x1c\x97\xc2\x88\x7d\x43\x62\xb6\xda\xfd\x14\x1b\x9f\x4a\x2f\x25\x5a\x3f\x1a\x49\xb5\xee\x1f\x05\x7b\x2e\x83\xd1\x53\x1a\x98\x88\xf5\x20\xd9\x81\xf9\x5a\xb0\x2a\xce\x05\xf2\x3c\x05\x39\xe9\xe0\x78\x17\x3d\xa3\x8d\x3e\x39\xd6\x88\x70\x9e\xf7\x1c\xac\x0b\x88\xe3\x92\x7f\x25\xbd\xae\xcb\xee\xa1\xfb\x71\xd1\xd3\x26\x7a\x4e\xb4\x9e\xe3\xeb\xdd\x5e\xa2\x6f\x57\x3f\x44\x53\xce\x56\x54\x9c\xbe\x12\x0a\xed\x66\x06\x6d\x27\x80\xbd\xdc\x79\x66\x2a\x79\xc3\xe6\xa5\x9e\xe2\x96\x39\x86\x4f\x7b\xa4\x21\xe5\xf3\x61\x92\x12\x0c\xa1\x7b\x74\x6a\x3d\x81\x9c\xb2\x50\x0d\x77\x9c\xda\xba\x18\xf8\x46\xdc\x0c\x93\x37\xe2\x90\x48\x08\x55\x6b\xa2\x73\xea\xdd\x33\x51\xa8\xed\x6f\xdf\x89\x9f\x2c\xca\x6d\x9e\xf1\x1b\x5f\x77\x8f\x9e\x25\xc2\x30\x76\x52\xa3\x94\xac\x24\xff\x89\xb2\x18\x3e\x0f\x77\x67\x2b\x4c\x7a\x32\x1a\xd3\x63\x31\x3e\x12\x8c\x56\xec\x70\x10\x0e\xe2\x25\x99\xd9\xe2\x67\xe6\xad\x77\xb2\x5d\x6c\x7f\x07\x00\x00\xff\xff\xd3\x01\xb6\xcc\x77\x07\x00\x00")

func ApiDataSchemaRepoJsonBytes() ([]byte, error) {
	return bindataRead(
		_ApiDataSchemaRepoJson,
		"../../api/data/schema/repo.json",
	)
}

func ApiDataSchemaRepoJson() (*asset, error) {
	bytes, err := ApiDataSchemaRepoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../api/data/schema/repo.json", size: 1911, mode: os.FileMode(420), modTime: time.Unix(1570415373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../api/data/schema/repo.json": ApiDataSchemaRepoJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"api": &bintree{nil, map[string]*bintree{
				"data": &bintree{nil, map[string]*bintree{
					"schema": &bintree{nil, map[string]*bintree{
						"repo.json": &bintree{ApiDataSchemaRepoJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

